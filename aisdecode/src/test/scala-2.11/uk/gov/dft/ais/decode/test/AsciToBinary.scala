package uk.gov.dft.ais.decode.test

import org.scalatest.FunSuite
import uk.gov.dft.ais.decode.Utils.ais_to_binary

class AsciToBinary extends FunSuite {
  val table = List(
      List("0",48,0,"000000"),
      List("1",49,1,"000001"),
      List("2",50,2,"000010"),
      List("3",51,3,"000011"),
      List("4",52,4,"000100"),
      List("5",53,5,"000101"),
      List("6",54,6,"000110"),
      List("7",55,7,"000111"),
      List("8",56,8,"001000"),
      List("9",57,9,"001001"),
      List(":",58,10,"001010"),
      List(";",59,11,"001011"),
      List("<",60,12,"001100"),
      List("=",61,13,"001101"),
      List(">",62,14,"001110"),
      List("?",63,15,"001111"),
      List("@",64,16,"010000"),
      List("A",65,17,"010001"),
      List("B",66,18,"010010"),
      List("C",67,19,"010011"),
      List("D",68,20,"010100"),
      List("E",69,21,"010101"),
      List("F",70,22,"010110"),
      List("G",71,23,"010111"),
      List("H",72,24,"011000"),
      List("I",73,25,"011001"),
      List("J",74,26,"011010"),
      List("K",75,27,"011011"),
      List("L",76,28,"011100"),
      List("M",77,29,"011101"),
      List("N",78,30,"011110"),
      List("O",79,31,"011111"),
      List("P",80,32,"100000"),
      List("Q",81,33,"100001"),
      List("R",82,34,"100010"),
      List("S",83,35,"100011"),
      List("T",84,36,"100100"),
      List("U",85,37,"100101"),
      List("V",86,38,"100110"),
      List("W",87,39,"100111"),
      List("`",96,40,"101000"),
      List("a",97,41,"101001"),
      List("b",98,42,"101010"),
      List("c",99,43,"101011"),
      List("d",100,44,"101100"),
      List("e",101,45,"101101"),
      List("f",102,46,"101110"),
      List("g",103,47,"101111"),
      List("h",104,48,"110000"),
      List("i",105,49,"110001"),
      List("j",106,50,"110010"),
      List("k",107,51,"110011"),
      List("l",108,52,"110100"),
      List("m",109,53,"110101"),
      List("n",110,54,"110110"),
      List("o",111,55,"110111"),
      List("p",112,56,"111000"),
      List("q",113,57,"111001"),
      List("r",114,58,"111010"),
      List("s",115,59,"111011"),
      List("t",116,60,"111100"),
      List("u",117,61,"111101"),
      List("v",118,62,"111110"),
      List("w",119,63,"111111")
  )

  test("ASCI encoded binary decodes correctly"){
    table.foreach{
      case List(
        encodedLetter: String,
        asci: Int,
        decimal: Int,
        binary: String
      ) => assert(ais_to_binary(encodedLetter) === binary)
    }
  }
}
